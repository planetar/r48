/* ---------------- MQTT OwnTracks ---------------- */
import org.openhab.core.library.types.StringType
import org.openhab.core.library.types.PointType

var Number sumDeltaTemp
var Number sumDeltaHum
var Number sumDeltaPress
var Number numSamples

/*
die Sensor und pir - parser sind alle nach sensor_data.py migriert, und dort gibt es nun fÃ¼r temp und hum calibration
hier sind nur noch Presence und health. der alte Stand ist auskommentiert erhalten.



Flur
Bad
Kueche
Balkon
SK
Clara
Medi
Office

Presence
Health

*/


/****************************************************** FLUR ************************************************/

// pir an Koel
     
// rule "mqPirFlurKoel changed"
//   when 
//     Item mqPirFlurKoel received update
//   then 
//     {
//       var String jsor
//       var String oval

//       jsor = (mqPirFlurKoel.state as StringType).toString

//       oval  = transform("JSONPATH", "$.pir1", jsor)
//       if (oval=="ON"){
//         PirState_Flur1.sendCommand(ON)
//         //logInfo("mqParse","PirState_Flur1 on")
//       }

//       oval  = transform("JSONPATH", "$.pir2", jsor)
//       if (oval=="ON"){
//         PirState_Flur2.sendCommand(ON)
//         //logInfo("mqParse","PirState_Flur2 on")
//       }
  

//     }
// end


// // pir 3, 4  lux1  an flurBox


// rule "mqPirFlur changed"
//   when 
//     Item mqPirFlur received update
//   then 
//     {
//       var String jsor
//       var String oval

//       jsor = (mqPirFlur.state as StringType).toString

//       oval  = transform("JSONPATH", "$.pir1", jsor)
//       if (oval=="ON"){
//         PirState_Flur3.sendCommand(ON)
//         //logInfo("mqParse","PirState_Flur3 on")
//       }

//       oval  = transform("JSONPATH", "$.pir2", jsor)
//       if (oval=="ON"){
//         PirState_Flur4.sendCommand(ON)
//         //logInfo("mqParse","PirState_Flur4 on")
//       }
  
//       oval  = transform("JSONPATH", "$.tocStatus", jsor)
//       //if (oval=="ON"){
//         flurSonderWunsch.sendCommand(oval)
//         //logInfo("mqParse","flurSonderWunsch "+oval)
//       //}
  

//     }
// end


// pirGarde



// rule "mqPirGarde changed"
//   when 
//     Item mqPirGarde received update
//   then 
//     {
//       var String jsor
//       var String oval

//       jsor = (mqPirGarde.state as StringType).toString

//       oval  = transform("JSONPATH", "$.pir", jsor)
//       if (oval=="ON"){
//         PirState_Garde.sendCommand(ON)
//         logInfo("mqParse","PirState_Garde on")
//       }

//     }
// end

/*
// -> sensor_data.py
// mqSensorFlur

rule "mqSensorFlur changed"
  when 
    Item mqSensorFlur received update
  then 
    { 
      var String jsor
      var String oval

      jsor = (mqSensorFlur.state as StringType).toString

      oval  = transform("JSONPATH", "$.temp", jsor)
      sensor_temperature_Flur.sendCommand(oval)    
      
      oval  = transform("JSONPATH", "$.hum", jsor)
      sensor_humidity_Flur.sendCommand(oval)    
      
     

    }
end
*/

// rfid
 


/****************************************************** Bad ************************************************/




/*
String mqPir_bad "pir1,2 Bad"         {channel="mqtt:topic:mqBroker:raspiSensors:pirBad"}
PirState_Bad1
PirState_Bad2

String mqSensorBad "sensors Bad"         {channel="mqtt:topic:mqBroker:raspiSensors:sensorBad"}
sensor_humidity_Bad
sensor_temperature_Bad 
sensor_lux_2

*/


// sensor bad an moa   mit temp , hum, lux

/*
// -> sensor_data.py
rule "mqSensorBad changed"
  when 
    Item mqSensorBad received update
  then 
    {
      var String jsor
      var String oval

      jsor = (mqSensorBad.state as StringType).toString

      oval  = transform("JSONPATH", "$.temp", jsor)
      sensor_temperature_Bad.sendCommand(oval)    
      
      oval  = transform("JSONPATH", "$.hum", jsor)
      sensor_humidity_Bad.sendCommand(oval)    
      
      oval  = transform("JSONPATH", "$.lux", jsor)
      sensor_lux_2.sendCommand(oval)      

    }
end
 */

// pir1, pir2  an moa

// rule "mqPir_bad changed"
//   when 
//     Item mqPir_bad received update
//   then 
//     {
//       var String jsor
//       var String oval

//       jsor = (mqPir_bad.state as StringType).toString

//       oval  = transform("JSONPATH", "$.pir1", jsor)
//       if (oval=="ON"){
//         PirState_Bad1.sendCommand(ON)
//         //logInfo("mqParse","PirState_Bad1 on")
//       }

//       oval  = transform("JSONPATH", "$.pir2", jsor)
//       if (oval=="ON"){
//         PirState_Bad2.sendCommand(ON)
//         //logInfo("mqParse","PirState_Bad2 on")
//       }
  

//     }
// end
     

// pir3 intense an box am Fenster
/*
String mqPirBad3     "incoming" 
String mqPirBad3Set  "outgoing" 

pir/bad3/state {"pir":"ON","intense":"nop","scanWifi":"OFF","vers":"0.01"}

*/
 
// rule "mqPirBad3 changed"
//   when 
//     Item mqPirBad3 received update
//   then 
//     {
//       var String jsor
//       var String oval

//       jsor = (mqPirBad3.state as StringType).toString

//       oval  = transform("JSONPATH", "$.pir", jsor)
//       if (oval=="ON"){
//         PirState_Bad3.sendCommand(ON)
//       }
  
      
//       oval  = transform("JSONPATH", "$.intense", jsor)
//       IntenseBad.postUpdate(oval)

//       // if (oval=="ON"){IntenseBad.sendCommand(oval)}
//       // else if (oval=="OFF"){
//       //   // nur wenn wirklich noetig, macht sonst kurzes Flackern
//       //   if (IntenseBad.state=ON){
//       //     IntenseBad.sendCommand(OFF)
//       //   }
//       // }

//     }
// end
     


/****************************************************** Kueche ************************************************/


/*
// -> sensor_data.py
rule "mqSensorKueche changed"
  when 
    Item mqSensorKueche received update
  then 
    {
      var String jsor
      var String oval

      jsor = (mqSensorKueche.state as StringType).toString

      oval  = transform("JSONPATH", "$.temp", jsor)
      sensor_temperature_Kueche.sendCommand(oval)    
      
      oval  = transform("JSONPATH", "$.hum", jsor)
      sensor_humidity_Kueche.sendCommand(oval)    
      
     // oval  = transform("JSONPATH", "$.lux", jsor)
     // sensor_lux_2.postUpdate(oval)      

    }
end

*/

/*
pir/kueche/state {"pir1":"OFF","pir2":"OFF","pir3":"ON","rssi":"-62","vers":"1.08"}
*/

// mqPirKueche

 
// rule "mqPirKueche received update"
//   when 
//     Item mqPirKueche received update
//   then 
//     {
//       var String jsor
//       var String oval

//       jsor = (mqPirKueche.state as StringType).toString

//       oval  = transform("JSONPATH", "$.pir1", jsor)
//       if (oval=="ON"){
//         PirState_Kueche.sendCommand(ON)
//       }
  
//       oval  = transform("JSONPATH", "$.pir2", jsor)
//       if (oval=="ON"){
//         PirState_Kueche2.sendCommand(ON)
//       }
  
//       oval  = transform("JSONPATH", "$.pir3", jsor)
//       if (oval=="ON"){
//         PirState_Kueche3.sendCommand(ON)
//       }
  
//       logInfo("mqttParse","pirKueche: "+jsor)
     
//     }
// end






/****************************************************** Balkon ************************************************/



// mqWetterBalkon
// sensor/wetterBalkon/state {"temp":27.58,"hum":38.85449,"press":1009.712,"rPress":1015.839,"lux":72,"broad":243,"infrared":139,"rssi":-60,"moist":601,"vers":"1.01"}

// bme280 hat temp, press, humidity. Vergesellschafftet mit tsl2561 mit Lux_4, broadband, infrared



// rule "mqWetterBalkon changed"
//   when 
//     Item mqWetterBalkon received update
//   then 
//     {
//       var String jsor = (mqWetterBalkon.state as StringType).toString

//       //logInfo("mqttParse",jsor)

//       var String oval  = transform("JSONPATH", "$.temp", jsor)
//       sensor_bme280_temperature.postUpdate(oval)

//       oval  = transform("JSONPATH", "$.pir", jsor)
//       if (oval=="ON"){
//         PirState_Balkon.sendCommand(ON)
//       }
  
//       oval  = transform("JSONPATH", "$.hum", jsor)
//       sensor_bme280_humidity.postUpdate(oval)

//       oval  = transform("JSONPATH", "$.press", jsor)
//       sensor_bme280_pressure.postUpdate(oval)

//       oval  = transform("JSONPATH", "$.rPress", jsor)
//       sensor_bme280_rPressure.postUpdate(oval)

//       oval  = transform("JSONPATH", "$.broad", jsor)
//       sensor_bme280_broadband.postUpdate(oval)

//       oval  = transform("JSONPATH", "$.infrared", jsor)
//       sensor_bme280_infrared.postUpdate(oval)

//       oval  = transform("JSONPATH", "$.lux", jsor)
//       sensor_lux_4.postUpdate(oval)

//       oval  = transform("JSONPATH", "$.rssi", jsor)
//       sensor_rssi_Balkon.postUpdate(oval)

//       // oval  = transform("JSONPATH", "$.an0", jsor)
//       // sensor_moist_balkon_0.postUpdate(oval)

//       // val telegramAction = getActions("telegram","telegram:telegramBot:anyID")
//       // telegramAction.sendTelegram("kleiner Gruss")

//     }
// end



/****************************************************** SK ************************************************/



/*
  Sensor calibration offsets

sensor     temp	 hum       mq (vs rest)
officePack	1,6	  11,1       +
officedesk	2,8	   1         +
SK	        0,8    5         +
bad	        0,5   12
kueche	    0,9   18
medi  	    2,1    7         +
clara	      2,1    1         +


TBD: 
  - mq for bad, kueche (raspi)
  - for each:  reportedVal - offset = usedVal
*/


/*

// {"temp":26.27,"hum":40.65918,"press":1021.306,"rPress":1028.113,"lux":0,"rssi":-59,"vers":"1.04"}
// mqPirSK pir/sk/state {"temp":0,"hum":0,"press":0,"rPress":0,"lux":257,"rssi":-53,"pir":"OFF","vers":"1.01"}  PirState_SK
rule "mqPirSK changed"
  when 
    Item mqPirSK received update
  then 
    {
      var String jsor = (mqPirSK.state as StringType).toString
      var String oval

      //logInfo("mqttParse",jsor)

      oval  = transform("JSONPATH", "$.lux", jsor)
      sensor_lux_3.postUpdate(oval)

      oval  = transform("JSONPATH", "$.temp", jsor)
      sensor_temperature_SK.postUpdate(oval)

      oval  = transform("JSONPATH", "$.hum", jsor)
      sensor_humidity_SK.postUpdate(oval)
      // logInfo("test",oval)
      // logInfo("test",jsor)
      // die zwei pressure haben derzeit kein item  (und ansich auch nicht viel Bedeutung)
      oval  = transform("JSONPATH", "$.press", jsor)
      //sensor_pressure_SK.postUpdate(oval)
      oval  = transform("JSONPATH", "$.rPress", jsor)
      //sensor_rPressure_SK.postUpdate(oval)

      oval  = transform("JSONPATH", "$.pir1", jsor)
      if (oval=="ON"){
        PirState_SK.sendCommand(ON)
      }
  
      oval  = transform("JSONPATH", "$.pir2", jsor)
      if (oval=="ON"){
        PirState_SK2.sendCommand(ON)
      }

      oval  = transform("JSONPATH", "$.toc", jsor)
      if (oval=="ON"){
        TocState_SK.sendCommand(ON)
      }

      oval  = transform("JSONPATH", "$.rssi", jsor)
      //logInfo("test",oval)
      sensor_rssi_SK.postUpdate(oval)
//    sensor_rssi_SK
    }
end
*/

/*


      oval  = transform("JSONPATH", "$.pir1", jsor)
      if (oval=="ON"){
        PirState_Kueche.sendCommand(ON)
      }
  
      oval  = transform("JSONPATH", "$.pir2", jsor)
      if (oval=="ON"){
        PirState_Kueche2.sendCommand(ON)
      }
  
*/


/****************************************************** Clara ************************************************/

// sensor/clara/state {"pir":"OFF","temp":21.1,"hum":45.9,"lastTemp":21,"lastHum":45.3,"fail2win":"0/5","lux":0,"rssi":"-28","vers":"1.08"}

// pir/clara/state {"temp":32,"hum":41.1,"lastTemp":32,"lastHum":40,"fail2win":"120/35","lux":35,"rssi":"-71","rushLux":"OFF","showPir":"OFF","showErr":"OFF","vers":"1.04"}

// rule "mqPirClara changed"
//   when 
//     Item mqPirClara received update
//   then 
//     {
//       var String jsor
//       var String oval

//       jsor = (mqPirClara.state as StringType).toString

//       oval  = transform("JSONPATH", "$.pir1", jsor)
//       if (oval=="ON"){
//         PirState_Clara1.sendCommand(ON)
//       }
//       oval  = transform("JSONPATH", "$.pir2", jsor)
//       if (oval=="ON"){
//         PirState_Clara2.sendCommand(ON)
//       }
//       /*
//       oval  = transform("JSONPATH", "$.temp", jsor)
//       sensor_temperature_Clara.postUpdate(oval)    
      
//       oval  = transform("JSONPATH", "$.hum", jsor)
//       sensor_humidity_Clara.postUpdate(oval)    
//       */

//       oval  = transform("JSONPATH", "$.lux", jsor)
//       sensor_lux_6.postUpdate(oval)      

//       oval  = transform("JSONPATH", "$.rssi", jsor)
//       sensor_rssi_Clara.postUpdate(oval)

//     }
// end
/*
rule "mqPirClara2 changed"
  when 
    Item mqPirClara2 changed
  then 
    {
      var String jsor
      var String oval

      jsor = (mqPirClara2.state as StringType).toString

      oval  = transform("JSONPATH", "$.pir", jsor)
      if (oval=="ON"){
        PirState_Clara2.sendCommand(ON)
      }
      
      oval  = transform("JSONPATH", "$.moisture", jsor)
      sensor_moisture_01.postUpdate(oval)    
     

    }
end
*/


// // multi   mqMulti

// rule "mqMulti received update"
//   when 
//     Item mqMulti received update
//   then 
//     {
//       var String jsor
//       var String oval

//       jsor = (mqMulti.state as StringType).toString

//       oval  = transform("JSONPATH", "$.pir1", jsor)
//       if (oval=="ON"){
//         PirState_Clara3.sendCommand(ON)
//       }
//       oval  = transform("JSONPATH", "$.pir2", jsor)
//       if (oval=="ON"){
//         PirState_Clara4.sendCommand(ON)
//       }

//       oval  = transform("JSONPATH", "$.temperature", jsor)
//       sensor_temperature_Clara.postUpdate(oval)    
      
//       oval  = transform("JSONPATH", "$.humidity", jsor)
//       sensor_humidity_Clara.postUpdate(oval)    
 
//       oval  = transform("JSONPATH", "$.pressure", jsor)
//       sensor_pressure_Clara.postUpdate(oval)    
      
//       oval  = transform("JSONPATH", "$.rPressure", jsor)
//       sensor_rPressure_Clara.postUpdate(oval)         
   
//     }
// end




/****************************************************** Medi ************************************************/



 
// // pir/medi/state {"temp":32.7,"hum":45.4,"lastTemp":32.7,"lastHum":45.1,"fail2win":"80/41","lux":53,"rssi":"-49","rushLux":"OFF","showPir":"OFF","showErr":"OFF","vers":"1.04"}
// rule "mqPirMedi changed"
//   when 
//     Item mqPirMedi received update
//   then 
//     {
//       var String jsor
//       var String oval

//       jsor = (mqPirMedi.state as StringType).toString

//       oval  = transform("JSONPATH", "$.pir", jsor)
//       if (oval=="ON"){
//         PirState_Medi.sendCommand(ON)
//       }
      
// /* 
//       oval  = transform("JSONPATH", "$.temp", jsor)
//       sensor_temperature_Medi.postUpdate(oval)    
      
//       oval  = transform("JSONPATH", "$.hum", jsor)
//       sensor_humidity_Medi.postUpdate(oval)
//        */

//       oval  = transform("JSONPATH", "$.temperature", jsor)
//       sensor_temperature_Medi.postUpdate(oval)    
      
//       oval  = transform("JSONPATH", "$.humidity", jsor)
//       sensor_humidity_Medi.postUpdate(oval)    
      
//       oval  = transform("JSONPATH", "$.lux", jsor)
//       sensor_lux_7.postUpdate(oval)      

//       oval  = transform("JSONPATH", "$.rssi", jsor)
//       sensor_rssi_Medi.postUpdate(oval)

//     }
// end




/****************************************************** Office ************************************************/



// rule "mqOfficeDesk changed"
//   when 
//     Item mqOfficeDesk received update
//   then 
//     {
//       var String jsor
//       var String oval

//       jsor = (mqOfficeDesk.state as StringType).toString

//       oval  = transform("JSONPATH", "$.temp", jsor)
//       if (oval != "0"){
//         sensor_temperature_OfficeDesk.postUpdate(oval)    
//       }
//       oval  = transform("JSONPATH", "$.hum", jsor)
//       sensor_humidity_OfficeDesk.postUpdate(oval)    
      
//       oval  = transform("JSONPATH", "$.lux", jsor)
//       sensor_lux_8.postUpdate(oval)      

//       oval  = transform("JSONPATH", "$.rssi", jsor)
//       sensor_rssi_OfficeDesk.postUpdate(oval)

//     }
// end

/*
Number sensor_temperature_OfficePack        "Temperatur Office [%.1f]Â°"         <temperature>   (gSensor1, gOffice) [ "CurrentTemperature" ]
Number sensor_humidity_OfficePack           "Luftfeuchte Office [%.1f]%"        <rain>          (gSensor1, gOffice) [ "CurrentHumidity" ]
Number sensor_pressure_OfficePack        "Luftdruck Office [%.1f]Â°"         <temperature>   (gSensor1, gOffice) [ "CurrentTemperature" ]
Number sensor_luminosity_OfficePack           "Helligkeit Office [%.1f]%"        <light>          (gSensor1, gOffice) [ "CurrentHumidity" ]

*/


rule "mqOfficePack changed"
  when 
    Item mqOfficePack received update
  then 
    {
      var String jsor
      var String oval

      jsor = (mqOfficePack.state as StringType).toString
      //logInfo("mqParse",jsor)

      // oval  = transform("JSONPATH", "$.temp", jsor)
      // sensor_temperature_OfficePack.postUpdate(oval)    
      
      // oval  = transform("JSONPATH", "$.hum", jsor)
      // sensor_humidity_OfficePack.postUpdate(oval)    
      
      // oval  = transform("JSONPATH", "$.lux", jsor)
      // sensor_luminosity_OfficePack.postUpdate(oval)      

      // oval  = transform("JSONPATH", "$.rPress", jsor)
      // sensor_pressure_OfficePack.postUpdate(oval)

      // // toc will bettreif auslÃ¶sen
      // oval = transform("JSONPATH", "$.toc", jsor)
      // if (oval=="ON"){
      //   // der kann wirklich nerven
      //   // bettReif.sendCommand(oval)  
      // }
       

     
        // pir will PirStateofficePack auslÃ¶sen
      oval = transform("JSONPATH", "$.pir", jsor)
      if (oval=="ON"){
        PirState_OfficePack.sendCommand(ON) 
      }  
      
      oval = transform("JSONPATH", "$.rushLux", jsor)
      if (oval=="ON"||oval=="OFF"){
        rush_officePack.postUpdate(oval)
      }
      oval = transform("JSONPATH", "$.loopDsp", jsor)
      if (oval=="ON"||oval=="OFF"){
        loopDisp_officePack.postUpdate(oval)
      }
      oval = transform("JSONPATH", "$.refDsp", jsor)
      if (oval=="ON"||oval=="OFF"){
        refDisp_officePack.postUpdate(oval)
      }
      oval = transform("JSONPATH", "$.scanWifi", jsor)
      if (oval=="ON"||oval=="OFF"){
        scanWifi_officePack.postUpdate(oval)
      }
      
      // kleine berechnung
      var Number delta
      var Number desk
      var Number pack
      
      desk = sensor_temperature_OfficeDesk.state as Number
      pack = sensor_temperature_OfficePack.state as Number
      delta = desk - pack
      ofcDelta_Temp.sendCommand(delta)

      desk = sensor_humidity_OfficeDesk.state as Number
      pack = sensor_humidity_OfficePack.state as Number
      delta = desk - pack
      ofcDelta_Hum.sendCommand(delta)

    }
end

/*
Number ofcDelta_Temp "temp officeDesk - officePack"
Number ofcDelta_Hum  "hum officeDesk - officePack"
*/
// rule "mqMulti changed"
//   when 
//     Item mqMulti changed
//   then 
//     {
//       var String jsor
//       var String oval

//       jsor = (mqMulti.state as StringType).toString

//       oval  = transform("JSONPATH", "$.temp", jsor)
//       sensor_temperature_Multi.postUpdate(oval)    
      
//       oval  = transform("JSONPATH", "$.hum", jsor)
//       sensor_humidity_Multi.postUpdate(oval)    
      
//       // oval  = transform("JSONPATH", "$.Co2", jsor)
//       // sensor_co2_Multi.postUpdate(oval)      

//       oval  = transform("JSONPATH", "$.rssi", jsor)
//       sensor_rssi_Multi.postUpdate(oval)

//     }
// end


// mqOfficeTuer
/*
pir/officeTuer/state {"pir":"ON","rushLux":"OFF","showPir":"ON","showErr":"OFF","vers":"1.04"}

*/


// rule "mqOfficeTuer changed"
//   when 
//     Item mqOfficeTuer received update
//   then 
//     {
//       var String jsor
//       var String oval

//       jsor = (mqOfficeTuer.state as StringType).toString
//       //logInfo("mqParse",jsor)

//       oval = transform("JSONPATH", "$.pir", jsor)
//       if (oval=="ON"){
//         PirState_OfficeTuer.sendCommand(ON) 
//       }  

//     }
// end



 // mqLuftdaten
/*
  sensor/feinstaub/state {"_type": "airRohr", "sensor_feinstaub_pressure": "100251.16", "sensor_feinstaub_pm25": "4.12", 
  "sensor_feinstaub_temp": "22.35", "sensor_feinstaub_pm10": "6.65", "sensor_feinstaub_hum": "67.41", "sensor_feinstaub_signal": "-60"}
*/

//  rule "mqLuftdaten changed"
//   when 
//     Item mqLuftdaten changed
//   then 
//     {
//       var String jsor
//       var String oval

//       jsor = (mqLuftdaten.state as StringType).toString

//       oval  = transform("JSONPATH", "$.sensor_feinstaub_pressure", jsor)
//       sensor_feinstaub_pressure.postUpdate(oval)

//       oval  = transform("JSONPATH", "$.sensor_feinstaub_pm25", jsor)
//       sensor_feinstaub_pm25.postUpdate(oval)

//       oval  = transform("JSONPATH", "$.sensor_feinstaub_temp", jsor)
//       sensor_feinstaub_temp.postUpdate(oval)

//       oval  = transform("JSONPATH", "$.sensor_feinstaub_pm10", jsor)
//       sensor_feinstaub_pm10.postUpdate(oval)

//       oval  = transform("JSONPATH", "$.sensor_feinstaub_hum", jsor)
//       sensor_feinstaub_hum.postUpdate(oval)

//       oval  = transform("JSONPATH", "$.sensor_feinstaub_signal", jsor)
//       sensor_feinstaub_signal.postUpdate(oval)

//     }



//   end




/////////////////  eich
/*
// eich in diff zu dem gemessenen. 
Number eichDiff_temp "diff der temp"
Number eichDiff_hum  "diff der Humidity"
Number eichDiff_press "diff des Drucks"

mqEich
*/

/*
Number sensor_temperature_OfficePack        "Temperatur Office [%.1f]Â°"         <temperature>   (gSensor1, gOffice) [ "CurrentTemperature" ]
Number sensor_humidity_OfficePack           "Luftfeuchte Office [%.1f]%"        <rain>          (gSensor1, gOffice) [ "CurrentHumidity" ]
Number sensor_pressure_OfficePack        "Luftdruck Office [%.1f]Â°"         <temperature>   (gSensor1, gOffice) [ "CurrentTemperature" ]
Number sensor_luminosity_OfficePack           "Helligkeit Office [%.1f]%"        <light>          (gSensor1, gOffice) [ "CurrentHumidity" ]

*/
rule "mqEich changed"
  when 
    Item mqEich changed
  then 
    {
      var String jsor
      var String oval

      var Number eich_temp
      var Number eich_hum
      var Number eich_press


      var Number test_temp
      var Number test_hum
      var Number test_press

      var Number delta_temp
      var Number delta_hum
      var Number delta_press

      var String testel

      jsor = (mqEich.state as StringType).toString
      //logInfo("mqParse",jsor)

      oval  = transform("JSONPATH", "$.temp", jsor)
      eich_temp = Float::parseFloat(oval)
      //sensor_temperature_OfficePack.postUpdate(oval)    
      
      oval  = transform("JSONPATH", "$.hum", jsor)
      eich_hum = Float::parseFloat(oval)
      //sensor_humidity_OfficePack.postUpdate(oval)      

      oval  = transform("JSONPATH", "$.rPress", jsor)
      eich_press = Float::parseFloat(oval)
      //sensor_pressure_OfficePack.postUpdate(oval)


      // so, die Diff zu:


       
      // testel = "Bad"
      //  officePack 
      // test_temp = sensor_temperature_OfficePack.state as Number
      // test_hum =  sensor_humidity_OfficePack.state as Number
      // test_press =  sensor_pressure_OfficePack.state as Number

      // officeDesk
      //testel = "officeDesk"
      // test_temp = sensor_temperature_OfficeDesk.state as Number
      // test_hum =  sensor_humidity_OfficeDesk.state as Number

      // testel = "Flur"
      // test_temp = sensor_temperature_Flur.state as Number
      // test_hum =  sensor_humidity_Flur.state as Number

      testel = "Bad"
      sensor_temperature_Bad
      test_temp = sensor_temperature_Bad.state as Number
      test_hum =  sensor_humidity_Bad.state as Number

      // testel = "Kueche"
      // test_temp = sensor_temperature_Kueche.state as Number
      // test_hum =  sensor_humidity_Kueche.state as Number

      // testel = "Clara" 
      // test_temp =   sensor_temperature_Clara.state as Number
      //  test_hum =  sensor_humidity_Clara.state as Number

      // testel = "Medi"
      // test_temp = sensor_temperature_Medi.state as Number
      // test_hum =     sensor_humidity_Medi.state as Number 

      // testel = "SK" 
      // test_temp = sensor_temperature_SK.state as Number
      // test_hum =     sensor_humidity_SK.state as Number

      //test_press =  sensor_pressure_OfficeDesk.state as Number

      // berechne und lege ab

      delta_temp = test_temp - eich_temp
      eichDiff_temp.postUpdate(delta_temp)

      delta_hum = test_hum - eich_hum
      eichDiff_hum.postUpdate(delta_hum)

      // delta_press = test_press - eich_press
      // eichDiff_press.postUpdate(delta_press)

      // sumDeltaTemp, sumDeltaHum, sumDeltaPress, numSamples
      sumDeltaTemp=sumDeltaTemp+delta_temp
      sumDeltaHum=sumDeltaHum+delta_hum
     // sumDeltaPress=sumDeltaPress+delta_press
      numSamples+=1

      logInfo("mqParse","eiche "+testel+": temp: "+delta_temp+" hum: "+delta_hum+" press: "+delta_press)

      delta_temp = sumDeltaTemp / numSamples
      delta_hum  = sumDeltaHum / numSamples
     // delta_press = sumDeltaPress / numSamples

      logInfo("mqParse","averrage Ã¼ber "+numSamples+": temp: "+delta_temp+" hum: "+delta_hum)
      //logInfo("mqParse","averrage Ã¼ber "+numSamples+": temp: "+delta_temp+" hum: "+delta_hum+" press: "+delta_press)




    }
end





/****************************************************** Presence ************************************************/


rule "MqttPostionParse_dp"
  when
    Item mqttPosition_dp_Raw changed 
  then
    var String json = (mqttPosition_dp_Raw.state as StringType).toString

    var String type = transform("JSONPATH", "$._type", json)
    if (type == "location") {
      var String lat    = transform("JSONPATH", "$.lat", json)
      var String lon    = transform("JSONPATH", "$.lon", json)
      var String acc    = transform("JSONPATH", "$.acc", json)
      var String batt   = transform("JSONPATH", "$.batt", json)
      
      var String alt    = transform("JSONPATH", "$.alt", json)

      mqtt_dp_Latitude.postUpdate(lat)
      mqtt_dp_Longitude.postUpdate(lon)
      location_dp.postUpdate(new PointType(lat + "," + lon))
    	mqtt_dp_Battery.postUpdate(batt)
      mqtt_dp_Accuracy.postUpdate(acc)
      mqtt_dp_Altitude.postUpdate(alt)
       

      if (json.contains("inregions")){
        var String region = transform("JSONPATH", "$.inregions", json)
        mqtt_dp_Region.postUpdate(region)
        location_dp_last.postUpdate(new PointType(lat + "," + lon))
      } else {
        // location_lulu_last hat die Koord des letzten Ortes, der zur Region mqtt_lulu_Region zÃ¤hlt
        // wir bestimmen mal die Distanz
        var Number currDistance = (location_dp_last.distanceFrom(location_dp))
        location_dp_last_distance.postUpdate(currDistance)
        //logInfo("mqttParse","dp distance to last region: "+currDistance)
      }
    
    } else 
    {
      logInfo("mqttParse","mal ein anderer Type fÃ¼r feng: "+type)
    }
  end

rule "MqttPostionParse_lulu" 
  when
    Item mqttPosition_lulu_Raw changed
  then
    var String json = (mqttPosition_lulu_Raw.state as StringType).toString

    var String type = transform("JSONPATH", "$._type", json)
    if (type == "location") {
      var String lat  = transform("JSONPATH", "$.lat", json)
      var String lon  = transform("JSONPATH", "$.lon", json)
      var String acc  = transform("JSONPATH", "$.acc", json)
      var String batt = transform("JSONPATH", "$.batt", json)
      
      var String alt    = transform("JSONPATH", "$.alt", json)

      //logInfo("mqttParse",json+" test: |"+json.contains("inregions")+"|")
      if (json.contains("inregions")){
        var String region = transform("JSONPATH", "$.inregions", json)
        mqtt_lulu_Region.postUpdate(region)
        location_lulu_last.postUpdate(new PointType(lat + "," + lon))
      // logInfo("mqttParse","Lulu at: lat: "+lat+" lon: "+lon+" alt: "+alt+" acc: "+acc+" batt: "+batt+" region: "+region)
      
      } else {
        // location_lulu_last hat die Koord des letzten Ortes, der zur Region mqtt_lulu_Region zÃ¤hlt
        // wir bestimmen mal die Distanz
        var Number currDistance = (location_lulu_last.distanceFrom(location_lulu))
        location_lulu_last_distance.postUpdate(currDistance)
        //logInfo("mqttParse","lulu distance to last region: "+currDistance)
      }

      location_lulu.postUpdate(new PointType(lat + "," + lon))
      mqtt_lulu_Accuracy.postUpdate(acc)
      mqtt_lulu_Battery.postUpdate(batt)
      mqtt_lulu_Altitude.postUpdate(alt)
     
    }
  end


rule "mqtt_lulu_Region changed"
  when 
    Item mqtt_lulu_Region changed
  then 
    {
      logInfo("mqttParse","lulu at Region: "+mqtt_lulu_Region.state)
      if (mqtt_lulu_Region.state=="home")
      {
        da_Luise.sendCommand(ON)
        da_jmd.sendCommand(ON)
      }
      else {
        if (da_Luise.state==ON){
          da_Luise.sendCommand(OFF)
        }
      }
    }
end

rule "mqtt_dp_Region changed"
  when 
    Item mqtt_dp_Region changed
  then 
    {
      logInfo("mqttParse","dp  at Region: "+mqtt_dp_Region.state)
      if (mqtt_dp_Region.state=="home")
      {
        // heimgekehrt-Action: Licht im Flur an etc
        da_Daniel.sendCommand(ON)
        da_jmd.sendCommand(ON)
      }
      else {
        if (da_Daniel.state==ON){
          da_Daniel.sendCommand(OFF)
        }
      }
    }
end



/****************************************************** raspiHealth ************************************************/


/*
String          mqHealth_tieke   "Roh"                    

Number health_tieke_temp  " [%.1f]Â°" (gTieke)
Number health_tieke_volt  " [%.1f]Â°" (gTieke)
Number health_tieke_clock  " [%.1f]Â°" (gTieke)
Number health_tieke_ram  " [%.1f]Â°" (gTieke)
Number health_tieke_gram  " [%.1f]Â°" (gTieke)
String health_tieke_cpuload
String health_tieke_memuse
Switch health_tieke_frequency_capped  (gTieke)
Switch health_tieke_frequency_capped_once  (gTieke)
Switch health_tieke_under_voltage  (gTieke)
Switch health_tieke_under_voltage_once  (gTieke)
Switch health_tieke_throttled  (gTieke)
Switch health_tieke_throttled_once  (gTieke)

sensor/health/tieke/state {"_type": "health", "temp": "45.1", "clock": "1400000000", "cpuload": "0.64 0.97 1.06", "throttled": "OFF", "throttled_once": "OFF", "ram": "998", "under_voltage": "OFF", "under_voltage_once": "OFF", "memuse": "total: 1076 used: 826 free: 44", "volt": "1.3750V", "gram": "16", "frequency_capped_once": "OFF", "id": "tieke", "frequency_capped": "OFF"}
*/

rule "mqHealth_tieke changed"
when 
  Item mqHealth_tieke changed
then
  var String json = (mqHealth_tieke.state as StringType).toString
  var String type = transform("JSONPATH", "$._type", json)
  if (type == "health") {
    var String oval  = transform("JSONPATH", "$.temp", json)
    health_tieke_temp.postUpdate(oval)
    oval  = transform("JSONPATH", "$.clock", json)
    health_tieke_clock.postUpdate(oval)
    oval  = transform("JSONPATH", "$.volt", json)
    health_tieke_volt.postUpdate(oval)
    oval  = transform("JSONPATH", "$.ram", json)
    health_tieke_ram.postUpdate(oval)
    oval  = transform("JSONPATH", "$.gram", json)
    health_tieke_gram.postUpdate(oval)
    oval  = transform("JSONPATH", "$.cpuload", json)
    health_tieke_cpuload.postUpdate(oval)
    oval  = transform("JSONPATH", "$.memuse", json)
    health_tieke_memuse.postUpdate(oval)
    oval  = transform("JSONPATH", "$.frequency_capped", json)
    health_tieke_frequency_capped.postUpdate(oval)
    oval  = transform("JSONPATH", "$.frequency_capped_once", json)
    health_tieke_frequency_capped_once.postUpdate(oval)
    oval  = transform("JSONPATH", "$.under_voltage", json)
    health_tieke_under_voltage.postUpdate(oval)
    oval  = transform("JSONPATH", "$.under_voltage_once", json)
    health_tieke_under_voltage_once.postUpdate(oval)
    oval  = transform("JSONPATH", "$.under_voltage", json)
    health_tieke_throttled.postUpdate(oval)
    oval  = transform("JSONPATH", "$.under_voltage_once", json)
    health_tieke_throttled_once.postUpdate(oval)
    health_tieke_load.postUpdate( health_tieke_cpuload.state.toString.split(" ").get(0) )
  }
end 

rule "mqHealth_moa changed"
when 
  Item mqHealth_moa changed
then
  var String json = (mqHealth_moa.state as StringType).toString
  var String type = transform("JSONPATH", "$._type", json)
  if (type == "health") {
    var String oval  = transform("JSONPATH", "$.temp", json)
    health_moa_temp.postUpdate(oval)
    oval  = transform("JSONPATH", "$.clock", json)
    health_moa_clock.postUpdate(oval)
    oval  = transform("JSONPATH", "$.volt", json)
    health_moa_volt.postUpdate(oval)
    oval  = transform("JSONPATH", "$.ram", json)
    health_moa_ram.postUpdate(oval)
    oval  = transform("JSONPATH", "$.gram", json)
    health_moa_gram.postUpdate(oval)
    oval  = transform("JSONPATH", "$.cpuload", json)
    health_moa_cpuload.postUpdate(oval)
    oval  = transform("JSONPATH", "$.memuse", json)
    health_moa_memuse.postUpdate(oval)
    oval  = transform("JSONPATH", "$.frequency_capped", json)
    health_moa_frequency_capped.postUpdate(oval)
    oval  = transform("JSONPATH", "$.frequency_capped_once", json)
    health_moa_frequency_capped_once.postUpdate(oval)
    oval  = transform("JSONPATH", "$.under_voltage", json)
    health_moa_under_voltage.postUpdate(oval)
    oval  = transform("JSONPATH", "$.under_voltage_once", json)
    health_moa_under_voltage_once.postUpdate(oval)
    oval  = transform("JSONPATH", "$.under_voltage", json)
    health_moa_throttled.postUpdate(oval)
    oval  = transform("JSONPATH", "$.under_voltage_once", json)
    health_moa_throttled_once.postUpdate(oval)
    health_moa_load.postUpdate( health_moa_cpuload.state.toString.split(" ").get(0) )

  }
end 

rule "mqHealth_tael changed"
when 
  Item mqHealth_tael changed
then
  var String json = (mqHealth_tael.state as StringType).toString
  var String type = transform("JSONPATH", "$._type", json)
  if (type == "health") {
    var String oval  = transform("JSONPATH", "$.temp", json)
    health_tael_temp.postUpdate(oval)
    oval  = transform("JSONPATH", "$.clock", json)
    health_tael_clock.postUpdate(oval)
    oval  = transform("JSONPATH", "$.volt", json)
    health_tael_volt.postUpdate(oval)
    oval  = transform("JSONPATH", "$.ram", json)
    health_tael_ram.postUpdate(oval)
    oval  = transform("JSONPATH", "$.gram", json)
    health_tael_gram.postUpdate(oval)
    oval  = transform("JSONPATH", "$.cpuload", json)
    health_tael_cpuload.postUpdate(oval)
    oval  = transform("JSONPATH", "$.memuse", json)
    health_tael_memuse.postUpdate(oval)
    oval  = transform("JSONPATH", "$.frequency_capped", json)
    health_tael_frequency_capped.postUpdate(oval)
    oval  = transform("JSONPATH", "$.frequency_capped_once", json)
    health_tael_frequency_capped_once.postUpdate(oval)
    oval  = transform("JSONPATH", "$.under_voltage", json)
    health_tael_under_voltage.postUpdate(oval)
    oval  = transform("JSONPATH", "$.under_voltage_once", json)
    health_tael_under_voltage_once.postUpdate(oval)
    oval  = transform("JSONPATH", "$.under_voltage", json)
    health_tael_throttled.postUpdate(oval)
    oval  = transform("JSONPATH", "$.under_voltage_once", json)
    health_tael_throttled_once.postUpdate(oval)

    health_tael_load.postUpdate( health_tael_cpuload.state.toString.split(" ").get(0) )
  }
end 

rule "mqHealth_koel changed"
when 
  Item mqHealth_koel changed
then
  var String json = (mqHealth_koel.state as StringType).toString
  var String type = transform("JSONPATH", "$._type", json)
  if (type == "health") {
    var String oval  = transform("JSONPATH", "$.temp", json)
    health_koel_temp.postUpdate(oval)
    oval  = transform("JSONPATH", "$.clock", json)
    health_koel_clock.postUpdate(oval)
    oval  = transform("JSONPATH", "$.volt", json)
    health_koel_volt.postUpdate(oval)
    oval  = transform("JSONPATH", "$.ram", json)
    health_koel_ram.postUpdate(oval)
    oval  = transform("JSONPATH", "$.gram", json)
    health_koel_gram.postUpdate(oval)
    oval  = transform("JSONPATH", "$.cpuload", json)
    health_koel_cpuload.postUpdate(oval)
    oval  = transform("JSONPATH", "$.memuse", json)
    health_koel_memuse.postUpdate(oval)
    oval  = transform("JSONPATH", "$.frequency_capped", json)
    health_koel_frequency_capped.postUpdate(oval)
    oval  = transform("JSONPATH", "$.frequency_capped_once", json)
    health_koel_frequency_capped_once.postUpdate(oval)
    oval  = transform("JSONPATH", "$.under_voltage", json)
    health_koel_under_voltage.postUpdate(oval)
    oval  = transform("JSONPATH", "$.under_voltage_once", json)
    health_koel_under_voltage_once.postUpdate(oval)
    oval  = transform("JSONPATH", "$.under_voltage", json)
    health_koel_throttled.postUpdate(oval)
    oval  = transform("JSONPATH", "$.under_voltage_once", json)
    health_koel_throttled_once.postUpdate(oval)

    health_koel_load.postUpdate( health_koel_cpuload.state.toString.split(" ").get(0) )

  }
end 

rule "mqHealth_kiwi changed"
when 
  Item mqHealth_kiwi changed
then
  var String json = (mqHealth_kiwi.state as StringType).toString
  var String type = transform("JSONPATH", "$._type", json)
  if (type == "health") {
    var String oval  = transform("JSONPATH", "$.temp", json)
    health_kiwi_temp.postUpdate(oval)
    oval  = transform("JSONPATH", "$.clock", json)
    health_kiwi_clock.postUpdate(oval)
    oval  = transform("JSONPATH", "$.volt", json)
    health_kiwi_volt.postUpdate(oval)
    oval  = transform("JSONPATH", "$.ram", json)
    health_kiwi_ram.postUpdate(oval)
    oval  = transform("JSONPATH", "$.gram", json)
    health_kiwi_gram.postUpdate(oval)
    oval  = transform("JSONPATH", "$.cpuload", json)
    health_kiwi_cpuload.postUpdate(oval)
    oval  = transform("JSONPATH", "$.memuse", json)
    health_kiwi_memuse.postUpdate(oval)
    oval  = transform("JSONPATH", "$.frequency_capped", json)
    health_kiwi_frequency_capped.postUpdate(oval)
    oval  = transform("JSONPATH", "$.frequency_capped_once", json)
    health_kiwi_frequency_capped_once.postUpdate(oval)
    oval  = transform("JSONPATH", "$.under_voltage", json)
    health_kiwi_under_voltage.postUpdate(oval)
    oval  = transform("JSONPATH", "$.under_voltage_once", json)
    health_kiwi_under_voltage_once.postUpdate(oval)
    oval  = transform("JSONPATH", "$.under_voltage", json)
    health_kiwi_throttled.postUpdate(oval)
    oval  = transform("JSONPATH", "$.under_voltage_once", json)
    health_kiwi_throttled_once.postUpdate(oval)

    health_kiwi_load.postUpdate( health_kiwi_cpuload.state.toString.split(" ").get(0) )

  }
end 

